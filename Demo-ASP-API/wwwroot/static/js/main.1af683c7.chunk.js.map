{"version":3,"sources":["serviceWorker.ts","Components/AboutDialog.js","Components/Header.js","Components/ApplicationList.js","MainPage.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AboutDialog","onClose","version","Dialog","open","DialogTitle","Grid","container","justify","alignItems","Typography","variant","name","mode","IconButton","onClick","DialogContent","DialogContentText","style","fontSize","Header","navigationCallBack","useState","displayAboutDialog","setDisplayAboutDialog","className","id","Styles","styled","div","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","Table","columns","data","filterTypes","React","useMemo","customText","rows","filter","row","rowValue","values","String","toLowerCase","includes","defaultColumn","Filter","useTable","useFilters","getTableProps","getTableBodyProps","headerGroups","prepareRow","firstPageRows","state","visibleColumns","preGlobalFilteredRows","setGlobalFilter","slice","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","i","getRowProps","cells","cell","getCellProps","ApplicationList","applications","setApplications","defaultColumns","accessor","fetchApplications","fetch","method","then","response","json","useEffect","MainPage","navigationState","updateNavigationState","Fragment","App","setNavigationState","setVersion","fetchVersion","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1af683c7.chunk.js","sourcesContent":["/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst AboutDialog = ({ onClose, version }) => {\n\n\n    return (\n\n        <Dialog open={true} >\n            <DialogTitle>\n                <Grid container justify=\"space-between\" alignItems=\"center\">\n                    <Typography variant=\"div\">About Application Portfolio Manager {version.name} {version.mode =='lite' ? \"(Lite)\" : \"\"}</Typography>\n                    <IconButton onClick={() => onClose(false)}>\n                        <CloseIcon />\n                    </IconButton>\n                </Grid></DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                <Typography variant=\"div\" style={{fontSize: '15px'}}>Application Portfolio Manager is a proprietary tool for use only by authorized personnel.</Typography>\n                <br></br>\n<Typography variant=\"div\" style={{fontSize: '15px'}}>\nCopying, reverse engineering, and/or distribution is strictly forbidden.</Typography>\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n\n    );\n};\n\nexport default AboutDialog;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport AboutDialog from './AboutDialog';\nconst Header = ( {navigationCallBack, version} ) => {\n    const [displayAboutDialog, setDisplayAboutDialog] = useState(false)\n   \n    const onAboutDialogClose = () => {\n      setDisplayAboutDialog(false)\n   }\n\n   const onAboutDialogOpen = () => {\n       setDisplayAboutDialog(true)\n    }\n\n    return (\n        <header className='header'>\n            <div className=\"flex-container\">\n                <div className='logo'></div>\n                <div className='title'>Application Portfolio Manager <span id=\"version\">{version.name}</span></div>\n                <div className='about-bt' onClick={onAboutDialogOpen}></div>\n            </div>\n            {displayAboutDialog && <AboutDialog version={version} onClose={onAboutDialogClose} ></AboutDialog>}\n        </header>\n    );\n};\nexport default Header;","import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useFilters, useAsyncDebounce } from 'react-table'\nimport { useState, useEffect } from 'react';\nconst Styles = styled.div`\n  padding: 1rem;\n  label {\n      font-weight: bold;\n      border-bottom: 1px solid black;\n  }\n  ul {\n      margin-left: 10px;\n  }\n  table {\n   \n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      font-size: 11px;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      vertical-align: text-top;\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter }\n}) {\n  const count = preFilteredRows.length\n   \n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Or, override the default text filter to use\n      // \"startWith\"\n      customText: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue.name)\n              .toLowerCase()\n              .includes(String(filterValue).toLowerCase())\n            : true\n        })\n      }\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters\n  )\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 1000)\n\n  return (\n    <>\n      <table className='filtered-table' {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nfunction ApplicationList() {\n\n  const [applications, setApplications] = React.useState([]);\n\n  //applications.push({\"name\" : \"Some App\"})\n\n  const defaultColumns = [{\n    Header: 'Applications',\n    columns: [\n      {\n        Header: 'Identifier',\n        accessor: \"identifier\"\n      },\n      {\n        Header: 'Name',\n        accessor: \"name\"\n      },\n      {\n        Header: 'Description',\n        accessor: \"description\"\n      },\n      {\n        Header: 'Organization',\n        accessor: \"organization\"\n      },\n      {\n        Header: 'Business Unit',\n        accessor: \"businessUnit\"\n      },\n      {\n        Header: 'Business Owner',\n        accessor: \"businessOwner\"\n      }\n    ],\n  }]\n\n  const columns = React.useMemo(\n    () => defaultColumns,\n    []\n  )\n\n  const data = React.useMemo(() => {\n    return applications\n  })\n\nconst fetchApplications = async () => {\n    await fetch('/api/v1/application', {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        return response.json();\n      })\n      .then(function (data) {\n        setApplications(data)\n      });\n  }\n\n  useEffect(() => {\n    fetchApplications()\n  }, [])\n\n  return (\n    <Styles>\n    <div className=\"main-table\">\n        <Table columns={columns} data={data} />\n    </div>\n    </Styles>\n  )\n}\n\nexport default ApplicationList\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport ApplicationList from './Components/ApplicationList';\n\nconst MainPage: React.FC<{ navigationState: any, updateNavigationState: any }> = ({ navigationState, updateNavigationState }) => {\n\n\n  // First load we get the templates available\n  useEffect(() => {\n  }, [])\n\n  return (\n    <React.Fragment>\n       <ApplicationList></ApplicationList>\n    </React.Fragment>\n  );\n};\nexport default MainPage;","\nimport React from 'react';\nimport Header from './Components/Header';\nimport { useEffect } from 'react';\nimport MainPage from \"./MainPage\";\nimport { useState } from 'react';\nconst App: React.FC<{ }> = () => {\n\n  const [navigationState, setNavigationState] = useState<any>({})\n  const [version, setVersion] = useState<any>()\n  function updateNavigationState (state: any) {\n    if (state) {\n       setNavigationState(state)\n    }\n  }\n\n  const fetchVersion = async () => {\n    await fetch('/api/version', {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        return response.json();\n      })\n      .then(function (data) {\n        setVersion(data)\n      });\n  }\n  useEffect(() => {\n    fetchVersion()\n  }, [])\n  //--------------------------------------------------------\n  return (\n    <React.Fragment>\n    {version && <Header version = {version} navigationCallBack={updateNavigationState}></Header>}\n    <div className='layout'>\n      <MainPage navigationState={navigationState} updateNavigationState={updateNavigationState}/>\n    </div>\n    </React.Fragment>\n  );\n}\n        \nexport default App;","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}